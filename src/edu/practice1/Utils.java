/* * Utils.java  0.3 2014/02/24 * * This code is created for self educational purpose, so anyone can use it. Author rights reserved. */ package edu.practice1;import java.util.*;/** * Class Utils implements methods used in other classes of the edu.practice1 package: * 		 + Anagram.java * 		 + CalendarSeeker.java * 		 + NeighbouringNumbers.java * 		 + PrimeNumbers.java * * To test all learning tasks add "test" argument at java Practice1Results command line call. * Then taskResult() of each class will call own runTest() method. * * @version 		0.3 24 Feb 2014 * @author 		Yuri Pyvovarenko*/ public class Utils {	/* Constants for a weeekday calculation */	public static final int WEEKDAY_CONST1 = 7000;	public static final int WEEKDAY_CONST2 = 100;	public static final int WEEKDAY_CONST3 = 400;	public static final int WEEKDAY_MONTH_MAX_DAYS = 31;	public static final int WEEKDAY_TOTAL_MONTHS = 12;	public static final int WEEKDAY_TOTAL_DAYS = 7;		/**	 * inputNotZeroString asks to input string until NotZeroString is entered	 */	public static String inputNotZeroString(Scanner in, String message) {		String result = new String();		String trimmedValue = new String();		do {			System.out.println(message);			result = in.nextLine();		} while ( 0 == result.trim().length() );		return result;	}		/**	 * checkLessThen10DigitsOnly checks received String if there are less then 10 characters and all they are digits	 */	public static boolean checkLessThen10DigitsOnly(String s) {		boolean result = false;		int length = s.length();		Character symbol;		String[] digits = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};		if (10 > length) {					/* go through all string symbols and check if they are digits */			for (int i = 0; i < length; i++) {				symbol = s.charAt(i);				result = false;				/* compare the symbol to all digits 0..9 */				for(String d : digits) {					if ( (symbol.toString()).equals(d) ) {						result = true;						break;					}				}				if (!result) break;			}		}				return result;	}	/**	 * You can use DAYS_OF_WEEK array to set names of days of week in another language.	 */	public static final String[] DAYS_OF_WEEK = {		"Sunday",		"Monday",		"Tuesday",		"Wednesday",		"Thursday",		"Friday",		"Saturday"	};	/*	public enum DaysOfWeek {			SU("Sunday"),			MO("Monday"),			TU("Tuesday"),			WE("Wednesday"),			TH("Thursday"),			FR("Friday"),			SA("Saturday");		private String name;				DaysOfWeek(String name) {			this.name = name;		}					public String getName() {			return name;		}	}*/	public static enum Months {			JANUARY,			FEBRUARY,			MARCH,			APRIL,			MAY,			JUNE,			JULY,			AUGUST,			SEPTEMBER,			OCTOBER,			NOVEMBER,			DECEMBER;					static final int[] MONTHS_DAYS_IN_LEAP_YEAR = 			{31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};		static final int[] MONTHS_DAYS_IN_NOT_LEAP_YEAR = 	{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};		static final String ALL_MONTHS_NAMES = 			"JANUARY," +			"FEBRUARY," +			"MARCH," +			"APRIL," +			"MAY," +			"JUNE," +			"JULY," +			"AUGUST," +			"SEPTEMBER," +			"OCTOBER," +			"NOVEMBER," +			"DECEMBER";					public static int getMonthNumber(String month) {			if ( ALL_MONTHS_NAMES.indexOf(month.toUpperCase()) > -1) {				return Months.valueOf(month.toUpperCase()).ordinal() + 1;			} else {				return 0;			}		}				public static int getMaxDaysInMonth(String month, boolean isLeapYear) {			return getMaxDaysInMonth(getMonthNumber(month), isLeapYear);		}				public static int getMaxDaysInMonth(int monthNumber, boolean isLeapYear) {			int result = 0;			int[] monthsDays = (isLeapYear) ? MONTHS_DAYS_IN_LEAP_YEAR : MONTHS_DAYS_IN_NOT_LEAP_YEAR;			if (( monthNumber > 0 ) && (monthNumber < 13)) {				return monthsDays[monthNumber-1];			} else {				return 0;			}		}	}				static void runTests() {		/* test checkLessThen10DigitsOnly */		String[] testStrings = {			"12q",			"12345678",			"1234567890",			"1.2",			"1,2",			"12",			"000",			"",			" "		};		for(String stringToTest : testStrings) {			System.out.println("checkLessThen10DigitsOnly(" + stringToTest + ") = " + Utils.checkLessThen10DigitsOnly(stringToTest));		}	}}